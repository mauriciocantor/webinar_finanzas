{% extends 'base.html.twig' %}

{% block body %}
    <div class="align-content-center mb-1">
        <div id="player" class="justify-content-center"></div>
    </div>

    <div class="btn-group" role="group" aria-label="Button group with nested dropdown" id="take_test" style="display: none;">
        <a class="btn btn-primary" data-bs-toggle="collapse" href="#collapseExample" role="button" aria-expanded="false" aria-controls="collapseExample">
            Realizar prueba
        </a>
    </div>

    <div class="align-content-center">

        <div class="collapse" id="collapseExample">
            <div class="card card-body" id="body-question">
                Some placeholder content for the collapse component. This panel is hidden by default but revealed when the user activates the relevant trigger.
            </div>
        </div>

    </div>
    <div class="collapse" id="collapseTest">
        <div class="card card-body" id="body-question">

        </div>
    </div>
    <script>
        let withTest = "{{ withTest }}";
    </script>
    {#<div class="modal fade in" id="staticBackdrop" data-backdrop="static" data-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable modal-xl" style="max-width: 100% !important;">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="staticBackdropLabel">Realiza la prueba</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body" id="body-question">

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary">Understood</button>
                </div>
            </div>
        </div>
    </div>#}
{% endblock %}
{% block stylesheets %}
    {{ parent() }}
    <style type="text/css">
        .align-content-center{
            display: flex;
            justify-content: center;
            margin-bottom: 15vh;
        }
        #player{
            align-self: center;
        }
    </style>
{% endblock %}
{% block javascripts %}
    {{ parent() }}
    <script>
        // 2. This code loads the IFrame Player API code asynchronously.
        var tag = document.createElement('script');

        tag.src = "https://www.youtube.com/iframe_api";
        var firstScriptTag = document.getElementsByTagName('script')[0];
        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

        // 3. This function creates an <iframe> (and YouTube player)
        //    after the API code downloads.
        var player;
        function onYouTubeIframeAPIReady() {
            player = new YT.Player('player', {
                height: '400',
                width: '100%',
                videoId: '{{ video.videoId }}',
                autoplay: 1,
                playerVars: {
                    'playsinline': 0,
                    color: 'white'
                },
                events: {
                    'onReady': onPlayerReady,
                    'onStateChange': onPlayerStateChange
                }
            });
        }

        // 4. The API will call this function when the video player is ready.
        function onPlayerReady(event) {
            player.seekTo({{ videoUser.currentTime??0 }})
            event.target.playVideo();
        }

        // 5. The API calls this function when the player's state changes.
        //    The function indicates that when playing a video (state=1),
        //    the player should play for six seconds and then stop.
        var done = false;
        function onPlayerStateChange(event) {
            let currentTime =  player.getCurrentTime();
            let totalTime =  player.getDuration();
            let video = {
                'currentTime':currentTime,
                'totalTime':totalTime,
                'user': "{{ app.user.id }}",
                'video': "{{ video.id }}"
            };

            if(event.data == YT.PlayerState.PAUSED || event.data == YT.PlayerState.ENDED /*&& ((currentTime / totalTime) > 0.98)*/){
                if(withTest) {
                    $.get("{{ path('app_question', {'video':video.id}) }}",
                        function (response) {
                            $('#body-question').html(response);
                            $('#staticBackdrop').modal('show');
                        });

                    $('#take_test').css('display','block');
                }
                $.post("{{ url('app_video_save_video_by_user') }}", {
                    data:{video},
                    dataType: "json",
                    success: function (response){
                        // console.log(response);
                    }
                });

            }

            // console.log(formatTime(player.getCurrentTime()), formatTime(player.getDuration()));
            // if(event.data == YT.PlayerState.ENDED){
            //
            // }
            // if (event.data == YT.PlayerState.PLAYING && !done) {
            //     // setTimeout(stopVideo, 6000);
            //     done = true;
            // }
        }
        function stopVideo() {
            player.stopVideo();
        }

        function formatTime(time){
            time = Math.round(time);

            var minutes = Math.floor(time / 60),
                seconds = time - minutes * 60;

            seconds = seconds < 10 ? '0' + seconds : seconds;

            return minutes + ":" + seconds;
        }
    </script>
{% endblock %}

